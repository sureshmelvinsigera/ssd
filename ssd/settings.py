"""
Django settings for ssd project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
from pathlib import Path

# initialise environment variables
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# This should be kept as an environment variable and should never be pasted as plaintext in the code, but this was not done to make marking easier- see the README for details.
SECRET_KEY = 'django-insecure-52*ze5j07eo$ehpj^3_q1n05y#9b61z1(!e2ajmo02vnjb30)c'

# This feature should always be False when the application is deployed to production, because it can leak sensitive information.
DEBUG = False

# fix here
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'api',
    'authentication',
    'rest_framework_swagger'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ssd.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'staticfiles': 'django.templatetags.static',
            }
        },
    },
]

WSGI_APPLICATION = 'ssd.wsgi.application'

# This section uses python-decouple to improve application security (Bastos, 2021). Ordinarily, for a database connection to be established, 
# database credentials would have to be added directly to the file in plaintext. This is a critical security risk because the repository is publicly hosted and the database is currently hosted on the internet. 
# Python-decouple is a library that makes it possible to separate sensitive information from source-code by forcing the code to get the data from a configuration file.
DATABASES = {
    'default': {
        'ENGINE': config('ENGINE'),
        'NAME': config('NAME'),
        'USER': config('USER'),
        'PASSWORD': config('PASSWORD'),
        'HOST': config('HOST'),
        'PORT': config('PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

# This variable controls how strict password validation is. Configurations are provided for common password validation requirements
# (e.g. minimum length). 
AUTH_PASSWORD_VALIDATORS = [
    {
        # This configuration checks if a submitted password is too similar to other submitted information (such as usernames and emails)
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # This configuration enforces a minimum length for password validation.
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # This configuration checks if a submitted password is part of the 20,000 most common passwords.
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # This configuration checks if a submitted password is purely numeric.
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'authentication.user'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 3
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=5184000),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=60),
}

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.csrf.CsrfViewMiddleware',
    "django.middleware.common.CommonMiddleware"
]

# CORS protects the application by preventing external web resources (such as third-party websites) from accessing the endpoints used on the website (Johnson, 2021). 
# This setting allows web requests only from localhost:8002, which is where the frontend is hosted.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8002",
]

ROOT_URLCONF = 'ssd.urls'

# References
# Bastos, H. (2021) Python Decouple: Strict separation of settings from code. Available from: https://github.com/henriquebastos/python-decouple/ [Accessed 25 October 2021].
# Johnson, A. (2021). django-cors-headers. Available from: https://github.com/adamchainz/django-cors-headers [Accessed 23 October 2021].
